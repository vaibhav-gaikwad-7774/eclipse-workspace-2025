import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.Test;

public class WebElementCommandsTest {

    WebDriver driver = new ChromeDriver();

    @Test
    public void testWebElementCommands() {
        // Navigate to the testing page
        driver.get("C:\\Users\\GFG0329\\eclipse-workspace\\SeleniumChromeAutomation\\src\\main\\java\\login.html");  // Replace with an actual URL

        // 1. Clear Command
        WebElement usernameField = driver.findElement(By.id("username"));
        usernameField.clear(); // Clear any existing text
        Assert.assertTrue(usernameField.getText().isEmpty(), "Text box should be cleared");

        // 2. SendKeys Command
        usernameField.sendKeys("testUser"); // Type text in the username field
        Assert.assertEquals(usernameField.getAttribute("value"), "testUser", "Text entered in username field is incorrect");

        // 3. Click Command
        WebElement loginButton = driver.findElement(By.id("loginButton"));
        loginButton.click(); // Click on the login button
        Assert.assertTrue(driver.getCurrentUrl().contains("dashboard"), "After clicking login, we should be redirected to the dashboard");

        // 4. IsDisplayed Command
        WebElement userAvatar = driver.findElement(By.id("userAvatar"));
        Assert.assertTrue(userAvatar.isDisplayed(), "User avatar should be visible");

        // 5. IsEnabled Command
        WebElement submitButton = driver.findElement(By.id("submitButton"));
        Assert.assertTrue(submitButton.isEnabled(), "Submit button should be enabled");

        // 6. IsSelected Command
        WebElement rememberMeCheckbox = driver.findElement(By.id("rememberMe"));
        rememberMeCheckbox.click();
        Assert.assertTrue(rememberMeCheckbox.isSelected(), "Remember Me checkbox should be selected");

        // 7. Submit Command
        WebElement form = driver.findElement(By.id("loginForm"));
        form.submit(); // Submit the login form
        Assert.assertTrue(driver.getCurrentUrl().contains("welcome"), "After submitting the form, we should be redirected to the welcome page");

        // 8. GetText Command
        WebElement welcomeMessage = driver.findElement(By.id("welcomeMessage"));
        Assert.assertEquals(welcomeMessage.getText(), "Welcome, testUser!", "Welcome message is incorrect");

        // 9. GetTagName Command
        String tagName = loginButton.getTagName();
        Assert.assertEquals(tagName, "button", "The tag name of the login button should be 'button'");

        // 10. GetCssValue Command
        String bgColor = submitButton.getCssValue("background-color");
        Assert.assertEquals(bgColor, "rgb(0, 123, 255)", "Submit button background color should be blue");

        // 11. GetSize Command
        Dimension size = submitButton.getSize();
        Assert.assertTrue(size.width > 0 && size.height > 0, "Button size should be greater than 0");

        // 12. GetLocation Command
        Point location = submitButton.getLocation();
        System.out.println("Submit button is located at X: " + location.x + " and Y: " + location.y);
        Assert.assertTrue(location.x >= 0 && location.y >= 0, "Button should have valid screen coordinates");

        // Clean up
        driver.quit();
    }
}
